const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const config = require('./config');
const helper = require('./helper');

helper.logStart();
mongoose.Promise = global.Promise;
mongoose.connect(config.DB_URL)
  .then(() => console.log('MongoDB connected'))
  .catch((err) => console.log('ERROR: ', err))
require('./models/users.model');
const Users = mongoose.model('users');

const bot = new TelegramBot(config.TOKEN, {
  polling: true
})

bot.onText(/\/help/, msg => {
  bot.sendMessage(msg.from.id, `Что умеет данный бот:\n\n1) /adminAddName - администратор может создать профиль. \n2) /adminDelPlayer - администратор может удалить профиль\n3) /listPlayers - показать список пользователей \n4) /addUser - пользователь может добавиться в базу\n5) /help - помощь`);
})

//Добавление НОВОГО ИМЕНИ в базу данных
let adminAddName = 0;
bot.onText(/\/adminAddName/, msg => {
  adminAddName = 1;
  bot.sendMessage(msg.from.id, `Добавьте новое имя в базу! \n\n/listPlayers - показать список пользователей`);
})
bot.on('message', msg => {
  if (adminAddName === 1 && msg.text[0] !== '/') {
    Users.find({}, (err, users) => {
      let perem = 10;
      users.length === 0 ? perem = 0 : perem = users[0].numberId;
      Users({
        userId: 0,
        numberId: perem + 1,
        firstName: '',
        logIn: false,
        nikname: msg.text,
        games: 0,
        goals: 0,
        assistant: 0,
        ownGoal: 0,
      }).save()
        .then((user) => {
          bot.sendMessage(msg.from.id, `В базу добавлен - ${user.nikname}.\n\n/adminAddName - добавим еще?\n/listPlayers - показать список пользователей.`);
        })
      adminAddName = 0;
    }).sort({ numberId: -1 })
  }
})

//Выводим Список игроков
bot.onText(/\/listPlayers/, msg => {
  //Добавить что база бустая
  Users.find({}, (err, users) => {
    if (users.length === 0) {
      bot.sendMessage(msg.from.id, `База данных пуста! \n\n/adminAddName - добавить профиль`);
      return;
    }
    let listPlayers = '';
    for (key in users) {
      listPlayers += `${users[key].numberId}) ${users[key].nikname} - ${users[key].firstName}\n`;
    }
    bot.sendMessage(msg.from.id, `Список пользователей в базе: \n${listPlayers}\n/adminAddName - добавить профиль\n/adminDelPlayer - удалить профиль`);
  })
    .sort({ numberId: 1 })
    .then(() => {
      Users.find({}, (err, user) => {
        user.forEach((item, index) => {
          item.numberId = index + 1;
          Users(item).save();
        })
      })
    })
})

//Удалить из базы
let adminDelPlayer = 0;
bot.onText(/\/adminDelPlayer/, msg => {
  adminAddName = 0;
  adminDelPlayer = 1;
  Users.find({}, (err, users) => {
    if (users.length === 0) {
      adminDelPlayer = 0;
      bot.sendMessage(msg.from.id, `База пуста.\n\n/adminAddName - добавить профиль.`);
      return;
    }
    let listPlayers = '';
    for (key in users) {
      listPlayers += `${users[key].numberId}) ${users[key].nikname} - ${users[key].firstName}\n`;
    }
    bot.sendMessage(msg.chat.id, `Список игроков в базе: \n${listPlayers}\nДля удаления игрока введите его порядковый номер.`);
  })
})
bot.on('message', msg => {
  if (adminDelPlayer === 1 && msg.text[0] !== '/') {
    if (/^\d+$/.test(msg.text) === false) {
      bot.sendMessage(msg.from.id, 'Ошибка. Введите целое число!');
      return;
    }
    let numberId = Number(msg.text);
    Users.find({}, (err, users) => {
      if (numberId > users.length) {
        bot.sendMessage(msg.from.id, helper.handlerErrorDBLength());
        return;
      }
      Users.findOne({ numberId: numberId }, (error, user) => {
        bot.sendMessage(msg.from.id, `Был удален: ${user.nikname} - ${user.firstName}\n\n/listPlayers - показать список пользователей`);
        user.remove();
      }).then(() => {
        Users.find({}, (err, user) => {
          user.forEach((item, index) => {
            item.numberId = index + 1;
            Users(item).save();
          })
        })
      })
    })
    adminDelPlayer = 0;
  }
})

//Пользователь региструется в базе данных
let addUser = 0;
bot.onText(/\/addUser/, msg => {
  Users.find({}, (err, users) => {
    if (users.length === 0) {
      addUser = 0;
      bot.sendMessage(msg.from.id, `Извените, база пуста! \n\nОбратитесь к администратору, что бы он добавил ваше Имя за которым Вы сможете закрепится.`);
      return;
    }
    let listPlayers = '';
    addUser = 1;
    for (key in users) {
      listPlayers += `${users[key].numberId}) ${users[key].nikname} - ${users[key].firstName}\n`;
    }
    bot.sendMessage(msg.from.id, `Привет, выбери из списка свое Имя, и отправь порядковый номер. Это позволит сохранить тебя в базе.\n\nСписок пользователей в базе: \n${listPlayers}`);
  }).sort({ numberId: 1 })
})
bot.on('message', msg => {// обрабоать на ошибки (сиволы, числа больше элементов в базе)
  if (addUser === 1 && msg.text[0] !== '/') {
    if (/^\d+$/.test(msg.text) === false) {
      bot.sendMessage(msg.from.id, 'Ошибка. Надо ввести число! \nНажмите на /addUser\nИ введите число');
      return;
    }
    let numberId = Number(msg.text);
    Users.find({}, (err, users) => {
      if (numberId > users.length) {
        bot.sendMessage(msg.from.id, helper.handlerErrorDBLength());
        return;
      }
      if (users[0].userId === msg.from.id) {
        bot.sendMessage(msg.from.id, 'Извените, но вы уже сохранены в базе. Для изменения имени обратитесь к администратору.');
        return;
      }
      Users.findOne({ numberId: numberId }, (error, user) => {
        user.userId = msg.from.id;
        user.logIn = true;
        user.firstName = msg.from.first_name
        Users(user).save();
        bot.sendMessage(msg.from.id, 'Поздравляю. Вы добавлены в базу.');
        return;
      })
    })
    addUser = 0;
  }
})
//С добавлением пользователей закончено
//==========================================================================





































СОЗДАНИЕ ОПРОСА

const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');
const config = require('./config');
const helper = require('./helper');

helper.logStart();
const bot = new TelegramBot(config.TOKEN, {
  polling: true
})

let flag = 0;
let chatId = '';
let max = 0;
bot.on('message', msg => {
  console.log(msg);
  max = Number(msg.text);
  if (max >= 1 && max <= 15 && flag === 1) {
    max = Number(msg.text);
    bot.sendPoll(chatId,
      `Надо набрать ${msg.text} мешков!`,
      ['Да', 'Нет', 'Незнаю'], {
      is_closed: false,
      is_anonymous: false
    })
  }
  flag = 0;
})

bot.on('message', msg => {
  if (msg.text === '/start@SundayFootballVote_bot' || msg.text === '/start') {
    flag++;
    chatId = msg.chat.id;
    bot.sendMessage(chatId, 'Сколько мешков надо на игру?', {
      reply_markup: {
        keyboard: [
          ['1', '7', '8', '9'],
          ['10'],
          ['11', '12', '13', '14', '15']
        ],
        one_time_keyboard: true,
        force_reply: false
      },
    })
  }
})

bot.on('poll', poll => {
  const voterCount = poll.options[0].voter_count;
  console.log(poll);
  if (voterCount == max) {
    bot.sendMessage(chatId, 'Голосование закончено. \nВсех мешков попрошу не опаздывать.');
    return;
  }
})

stopPoll

// закрыть опрос
Poll poll = await botClient.StopPollAsync(
    chatId: pollMessage.Chat.Id,
    messageId: pollMessage.MessageId
);




  Promise.all([
    Users.findOne({ userId: poll_answer.user.id }),
    Games.findOne({ pollId: poll_answer.poll_id })
  ]).then(([user, game]) => {
    console.log('user', user);
    console.log('game', game);
  })


  
  /* Promise.all([
    Games.findOne({ pollId: poll_answer.poll_id }),
    Users.findOne({ userId: poll_answer.user.id })
  ]).then(([game, user]) => {
    console.log('game', game);
    console.log('user', user);
  }) */
  //Games.update({ pollId: poll_answer.poll_id }, { $set: { gameMaxPlayers: 30 } })
  /* db.users.update({name : "Tom", age: 29}, {$set: {age : 30}}) */
  /* Games.find({ pollId: poll_answer.poll_id }, (err, game) => {
    console.log(game);
    Games({
      gameStat: {
        userId: poll_answer.user.id,
        firstName: poll_answer.user.first_name,
      }
    }).save()
  }) */
  /* console.log('poll_answer', poll_answer);
  console.log('poll_answer.poll_id', poll_answer.poll_id);
  console.log('poll_answer.user.id', poll_answer.user.id); */
  /* Users.find({ userId: poll_answer.user.id }, (err, users) => {
    console.log('нашел ' + users);
  }).limit(1) */
  /* const voterCount = poll.options[0].voter_count;
  Users.find({})
  if (voterCount == max) {
    bot.sendMessage(chatId, 'Голосование закончено. \nВсех мешков попрошу не опаздывать.');
    return;
  } */








  bot.on('message', msg => {
  console.log('msg');
  /* Games.findOneAndUpdate({ _id: "60787a319a12611c18d3369a", "gameStat._id": "60787a359a12611c18d3369e" }, {
    $set: { "gameStat.$.goals": 102 },
  }, { multi: true }, (e, data) => {
    console.log('123', data);
  }) */
  /* Person.update({'items.id': 2}, {'$set': {
    'items.$.name': 'updated item2',
    'items.$.value': 'two updated'
}}, function(err) { ... */

  /* Games.findOneAndUpdate({ _id: "60787a319a12611c18d3369a" }, {
    $set: { gameMaxPlayers: 200 },
  }, { multi: true }, (e, data) => {
    console.log('123', data);
  }) */
})